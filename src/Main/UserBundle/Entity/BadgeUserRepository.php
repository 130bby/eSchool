<?php

namespace Main\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BadgeUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BadgeUserRepository extends EntityRepository
{
	public function setBadges($user,$score,$theme,$savoir = false,$evaluation = false)
	{
		$badges_new = array();
		$badges_aquired = $this->getEntityManager()
			->createQuery('SELECT b FROM MainUserBundle:BadgeUser b WHERE b.user ='.$user->getId())->getResult();

		// Maitre du %theme%
		$savoirs_theme = $this->getEntityManager()
			->createQuery('SELECT s.id FROM MainSavoirBundle:Savoir s WHERE s.theme = '.$theme->getId())->getResult();
		$savoir_ids = array();
		foreach ($savoirs_theme as $savoir_theme)
		{
			$savoir_ids[] = $savoir_theme['id'];
		}
		$savoirs_aquired = $this->getEntityManager()
			->createQuery('SELECT DISTINCT s.id as id
				FROM MainSavoirBundle:Savoir s, MainUserBundle:SavoirUser u 
				WHERE  u.score >= s.score_mini and u.user = '.$user->getId().' 
				and u.savoir = s.id and s.id IN ('.implode(',',$savoir_ids).')')->getResult();
		
		if (sizeof($savoirs_aquired) == sizeof($savoirs_theme))
		{
			$acquired = false;
			foreach ($badges_aquired as $current_badge)
			{
				if ($current_badge->getBadge()->getId() == 1)
				{
					$badge_maitre = $current_badge;
					if (in_array($theme->getId(),$current_badge->getThemes()))
						$acquired = true;
				}
			}
			
			if ($acquired === false)
			{
				if (!isset($badge_maitre))
				{
					$badge_maitre = $this->getEntityManager()
						->createQuery('SELECT b FROM MainBadgeBundle:Badge b WHERE b.id = 1')->getOneorNullResult();
					$badge1 = new BadgeUser();
					$badge1->setUser($user);
					$badge1->setBadge($badge_maitre);
					$badge1->setDate(new \Datetime());
					$badge1->setNiveau(1);
					$badge1->setThemes(array($theme->getId()));
					$this->_em->persist($badge1);
					$badges_new[] = $badge1;
				}
				else
				{
					$badge_maitre->setThemes(array_merge($badge_maitre->getThemes(),array($theme->getId())));
					$this->_em->persist($badge_maitre);
					$badges_new[] = $badge_maitre;
				}
			}
		}

		// Sur le bout des doigts
		if ($score == 100)
		{
			$acquired = false;
			foreach ($badges_aquired as $current_badge)
			{
				if ($current_badge->getBadge()->getId() == 2)
					$acquired = true;
			}
			if ($acquired === false)
			{
				$badge_bdd = $this->getEntityManager()
					->createQuery('SELECT b FROM MainBadgeBundle:Badge b WHERE b.id = 2')->getOneorNullResult();
				$badge2 = new BadgeUser();
				$badge2->setUser($user);
				$badge2->setBadge($badge_bdd);
				$badge2->setDate(new \Datetime());
				$badge2->setNiveau(1);
				$this->_em->persist($badge2);
				$badges_new[] = $badge2;
			}
		}

		// A l'épreuve du feu
		$acquired = false;
		foreach ($badges_aquired as $current_badge)
		{
			if ($current_badge->getBadge()->getId() == 3)
				$acquired = true;
		}
		if (!$acquired)
		{
			if (($evaluation && $score >= 70) || (!$evaluation && $score >= $savoir->getScoreMini()))
			{
				$badge_aef = $this->getEntityManager()
					->createQuery('SELECT b FROM MainBadgeBundle:Badge b WHERE b.id = 3')->getOneorNullResult();
				$badge3 = new BadgeUser();
				$badge3->setUser($user);
				$badge3->setBadge($badge_aef);
				$badge3->setDate(new \Datetime());
				$badge3->setNiveau(1);
				$this->_em->persist($badge3);
				$badges_new[] = $badge3;
			}
		}
		
		// Repris de justesse
		$acquired = false;
		foreach ($badges_aquired as $current_badge)
		{
			if ($current_badge->getBadge()->getId() == 4)
				$acquired = true;
		}
		if (!$acquired)
		{
			if (($evaluation && $score == 70) || (!$evaluation && $score == $savoir->getScoreMini()))
			{
				$badge_rdj = $this->getEntityManager()
					->createQuery('SELECT b FROM MainBadgeBundle:Badge b WHERE b.id = 4')->getOneorNullResult();
				$badge4 = new BadgeUser();
				$badge4->setUser($user);
				$badge4->setBadge($badge_rdj);
				$badge4->setDate(new \Datetime());
				$badge4->setNiveau(1);
				$this->_em->persist($badge4);
				$badges_new[] = $badge4;
			}
		}

		// J'ai plus d'une preuve !
		$acquired = false;
		foreach ($badges_aquired as $current_badge)
		{
			if ($current_badge->getBadge()->getId() == 5)
				$acquired = $current_badge;
		}
		if ($acquired)
		{
			if (sizeof($savoirs_aquired) >= 100 && $acquired->getNiveau() < 5)
			{
				$acquired->setNiveau(5);
				$this->_em->persist($acquired);
				$badges_new[] = $acquired;
			}
			elseif (sizeof($savoirs_aquired) >= 50 && $acquired->getNiveau() < 4)
			{
				$acquired->setNiveau(4);
				$this->_em->persist($acquired);
				$badges_new[] = $acquired;
			}
			elseif (sizeof($savoirs_aquired) >= 20 && $acquired->getNiveau() < 3)
			{
				$acquired->setNiveau(3);
				$this->_em->persist($acquired);
				$badges_new[] = $acquired;
			}
			elseif (sizeof($savoirs_aquired) >= 10 && $acquired->getNiveau() < 2)
			{
				$acquired->setNiveau(2);
				$this->_em->persist($acquired);
				$badges_new[] = $acquired;
			}
		}
		elseif (!$acquired && sizeof($savoirs_aquired) >= 5)
		{
			$badge_jpp = $this->getEntityManager()
				->createQuery('SELECT b FROM MainBadgeBundle:Badge b WHERE b.id = 5')->getOneorNullResult();
			$badge5 = new BadgeUser();
			$badge5->setUser($user);
			$badge5->setBadge($badge_jpp);
			$badge5->setDate(new \Datetime());
			$badge5->setNiveau(1);
			$this->_em->persist($badge5);
			$badges_new[] = $badge5;
		}


		// Tout le monde thème <3
		foreach ($badges_aquired as $current_badge)
		{
			if ($current_badge->getBadge()->getId() == 1)
				$badge_mdt = $current_badge;
			if ($current_badge->getBadge()->getId() == 6)
				$badge_tmt = $current_badge;
		}
		if (isset($badge_tmt))
		{
			if (sizeof($badge_mdt->getThemes()) >= 25 && $badge_tmt->getNiveau() < 6)
			{
				$badge_tmt->setNiveau(6);
				$this->_em->persist($badge_tmt);
				$badges_new[] = $badge_tmt;
			}
			elseif (sizeof($badge_mdt->getThemes()) >= 20 && $badge_tmt->getNiveau() < 5)
			{
				$badge_tmt->setNiveau(5);
				$this->_em->persist($badge_tmt);
				$badges_new[] = $badge_tmt;
			}
			elseif (sizeof($badge_mdt->getThemes()) >= 15 && $badge_tmt->getNiveau() < 4)
			{
				$badge_tmt->setNiveau(4);
				$this->_em->persist($badge_tmt);
				$badges_new[] = $badge_tmt;
			}
			elseif (sizeof($badge_mdt->getThemes()) >= 10 && $badge_tmt->getNiveau() < 3)
			{
				$badge_tmt->setNiveau(3);
				$this->_em->persist($badge_tmt);
				$badges_new[] = $badge_tmt;
			}
			elseif (sizeof($badge_mdt->getThemes()) >= 5 && $badge_tmt->getNiveau() < 2)
			{
				$badge_tmt->setNiveau(2);
				$this->_em->persist($badge_tmt);
				$badges_new[] = $badge_tmt;
			}
		}
		elseif (!isset($badge_tmt) && sizeof($badge_mdt->getThemes()) >= 3)
		{
			$badge_tlmtm = $this->getEntityManager()
				->createQuery('SELECT b FROM MainBadgeBundle:Badge b WHERE b.id = 6')->getOneorNullResult();
			$badge6 = new BadgeUser();
			$badge6->setUser($user);
			$badge6->setBadge($badge_tlmtm);
			$badge6->setDate(new \Datetime());
			$badge6->setNiveau(1);
			$this->_em->persist($badge6);
			$badges_new[] = $badge6;
		}

		// Tenace, ne lâche pas le morceau
		if (!$evaluation)
		{
			$acquired = false;
			foreach ($badges_aquired as $current_badge)
			{
				if ($current_badge->getBadge()->getId() == 7)
					$acquired = true;
			}
			if (!$acquired)
			{
				$savoir_failed = $this->getEntityManager()
					->createQuery('SELECT DISTINCT s.id as id
						FROM MainSavoirBundle:Savoir s, MainUserBundle:SavoirUser u 
						WHERE  u.score < s.score_mini and u.user = '.$user->getId().' 
						and u.savoir = s.id and s.id = '.$savoir->getId())->getResult();
				if($savoir_failed)
				{
					$badge_tnlplm = $this->getEntityManager()
						->createQuery('SELECT b FROM MainBadgeBundle:Badge b WHERE b.id = 7')->getOneorNullResult();
					$badge7 = new BadgeUser();
					$badge7->setUser($user);
					$badge7->setBadge($badge_tnlplm);
					$badge7->setDate(new \Datetime());
					$badge7->setNiveau(1);
					$this->_em->persist($badge7);
					$badges_new[] = $badge7;
				}
			}
		}
		
		$this->_em->flush();
		return $badges_new;
	}

	public function getBadges($user)
	{
		$badges_aquired = $this->getEntityManager()
			->createQuery('SELECT b FROM MainUserBundle:BadgeUser b WHERE b.user ='.$user->getId())->getResult();
		$badges = array();
		$badge1 = false;
		$badge2 = false;
		$badge3 = false;
		$badge4 = false;
		$badge5 = false;
		$badge6 = false;
		$badge7 = false;
		
		foreach ($badges_aquired as $key => $badge)
		{
			if ($badge->getBadge()->getId() == 1) 
				$badges[1] = $badge;
			if ($badge->getBadge()->getId() == 2) 
				$badges[2] = $badge;
			if ($badge->getBadge()->getId() == 3) 
				$badges[3] = $badge;
			if ($badge->getBadge()->getId() == 4) 
				$badges[4] = $badge;
			if ($badge->getBadge()->getId() == 5) 
				$badges[5] = $badge;
			if ($badge->getBadge()->getId() == 6) 
				$badges[6] = $badge;
			if ($badge->getBadge()->getId() == 7) 
				$badges[7] = $badge;
		}
		
		
		return $badges;
	
	}
}
