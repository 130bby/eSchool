<?php

namespace Main\SavoirBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SavoirRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SavoirRepository extends EntityRepository
{

	public function getArbre($theme_id, $user)
	{
		$arbre = array();
		$savoirs = $this->getEntityManager()
			->createQuery('SELECT s, t FROM MainSavoirBundle:Savoir s JOIN s.theme t WHERE s.theme ='.$theme_id)->getArrayResult();
		// on récupère les savoir sans prérequis pour créer le premier niveau
		foreach ($savoirs as $key => $savoir)
		{
			if ($savoir['prerequis'] === array())
			{
				$this->setStrength($savoir,$user);
				$savoir['available'] = true;
				$arbre['level1'][] = $savoir;
				unset($savoirs[$key]);
			}
			// cas ou un theme a des prerequis seulement d'un theme différent
			else
			{
				$prerequis = $this->getEntityManager()
					->createQuery('SELECT s, t FROM MainSavoirBundle:Savoir s JOIN s.theme t WHERE s.id IN ('.implode(",",$savoir['prerequis']).')')->getArrayResult();
				$is_level1 = true;	
				foreach ($prerequis as $current_prerequis)
				{
					if($current_prerequis['theme']['id'] == $theme_id)
					{
						$is_level1 = false;	
						break;
					}
				}
				if ($is_level1)
				{
					$this->setStrength($savoir,$user);
					$savoir['available'] = true;
					$arbre['level1'][] = $savoir;
					unset($savoirs[$key]);
				}
					
			}
		}

		$evaluations = $this->getEntityManager()
			->createQuery('SELECT e FROM MainEvaluationBundle:Evaluation e WHERE e.theme ='.$theme_id)->getArrayResult();
		
		$i=1;
		// on récupère les niveaux suivants
		while (!empty($savoirs))
		{
			$this->getNextLevel($savoirs, $arbre, $user, $arbre['level'.$i], $i+1, $theme_id, $evaluations);
			$i++;
		}

		return $arbre;
	}
	
	private function getNextLevel(&$savoirs, &$arbre, $user, $prerequis, $level, $theme_id, &$evaluations)
	{
		
		//modif le tableau evaluations
		foreach ($savoirs as $savoir)
			$savoir_ids[] = $savoir['id'];
		foreach ($evaluations as $key => $evaluation)
		{
			$eval_bool = true;
			foreach ($evaluation['savoirs'] as $eval_savoir_id)
				if (in_array($eval_savoir_id,$savoir_ids))
					$eval_bool = false;
			if 	($eval_bool === true)
			{
				$evaluation_user = $this->getEntityManager()
				->createQuery('SELECT e FROM MainUserBundle:EvaluationUser e WHERE e.user ='.$user->getId().' AND e.evaluation ='.$evaluation['id'])->getOneOrNullResult();
				if ($evaluation_user !== NULL)
					$evaluation['passed'] = true;
				
				$arbre['evaluations'][$level] = $evaluation;
				unset($evaluations[$key]);
			}
		}
		
		foreach ($prerequis as $current_level)
		{
			foreach ($savoirs as $key => $savoir)
			{
				// si le savoir est du niveau qui nous interesse
				if (in_array((string)$current_level['id'],$savoir['prerequis']))
				{
					// on ajoute un champ "available" a notre tableau savoir (savoir s'il est accessible par l'user courant)
					$savoir['available'] = false;
					$prerequis_passed = array();
					$savoir['prerequis_name'] = array();
					$i=0;
					// on check si les prérequis du savoir sont remplis
					foreach ($savoir['prerequis'] as $current_prerequis)
					{
						$savoirs_user = $this->getEntityManager()
						->createQuery('SELECT s FROM MainUserBundle:SavoirUser s WHERE s.user ='.$user->getId().' AND s.savoir ='.$current_prerequis)->getArrayResult();
						$i++;
						// on parcours le tableau des savoirs pour trouver le prerequis
						foreach ($savoirs as $savoir_prerequis)
						{
							if ($savoir_prerequis['id'] == $current_prerequis)
								$current_prerequis_object = $savoir_prerequis;
						}
						if (isset($current_prerequis_object))
						{
							foreach ($savoirs_user as $savoir_user)
							{
								if 	($savoir_user['success'])
								{
									$prerequis_passed[$i] = true;
									break;
								}
								else
									$prerequis_passed[$i] = false;
							}
							//On rajoute le nom du prérequis
							$savoir['prerequis_name'][] = $current_prerequis_object['name'];
						}
						else
						{
							$current_prerequis_object = $this->getEntityManager()
							->createQuery('SELECT s FROM MainSavoirBundle:Savoir s WHERE s.id ='.$current_prerequis)->getOneOrNullResult();
						
							// cas ou le prérequis vient d'un theme différent
							if 	((int)$current_prerequis_object->getTheme()->getId() != $theme_id)
							{
								$prerequis_passed[$i] = true;
							}
							else
							{
								foreach ($savoirs_user as $savoir_user)
								{
									if 	($savoir_user['success'])
									{
										$prerequis_passed[$i] = true;
										break;
									}
									else
										$prerequis_passed[$i] = false;
								}
							}
							//On rajoute le nom du prérequis
							$savoir['prerequis_name'][] = $current_prerequis_object->getName();
						}
						unset($current_prerequis_object);
					}
					$j = 0;
					foreach ($prerequis_passed as $passed)
					{
						if ($passed)
							$j++;
					}
					if ($j == sizeof($savoir['prerequis']))
						$savoir['available'] = true;
					
					$this->setStrength($savoir,$user);
					
					$arbre['level'.$level][] = $savoir;
					unset($savoirs[$key]);
				}
				
			}
		}
		return $arbre;
	}
	
	//set la priopriété strength du tableau savoir (barre de force dans l'arbre de connaissance)
	private function setStrength(&$savoir,$user)
	{
		$savoir_user = $this->getEntityManager()
			->createQuery('SELECT s FROM MainUserBundle:SavoirUser s WHERE s.user ='.$user->getId().' AND s.savoir ='.$savoir['id'].' ORDER BY s.score DESC')->getArrayResult();
		if (!empty($savoir_user) && $savoir_user[0]['score'] > 0)
		{
			switch ($savoir_user[0]['score']) {
			case 100 : 
				$savoir['strength'] = 5;
				break;
			case ( $savoir_user[0]['score'] > $savoir['score_mini']+3*(100-$savoir['score_mini'])/4) : 
				$savoir['strength'] = 4;
				break;
			case ( $savoir_user[0]['score'] > $savoir['score_mini']+(100-$savoir['score_mini'])/2) : 
				$savoir['strength'] = 3;
				break;
			case ( $savoir_user[0]['score'] > $savoir['score_mini']+(100-$savoir['score_mini'])/4) : 
				$savoir['strength'] = 2;
				break;
			case ( $savoir_user[0]['score'] > $savoir['score_mini']) : 
				$savoir['strength'] = 1;
				break;
			case $savoir['score_mini'] : 
				$savoir['strength'] = 0;
				break;
			}
		}
	}
	
	public function getSavoirsAAmeliorer($user,$themes)
	{
		$themes_TBP = array();
		
		foreach ($themes as $key => $theme)
		{
			$themes_TBP[$key]['name'] = $theme->getTheme()->getName();
			$arbre = $this->getArbre($theme->getTheme()->getId(), $user);
			if (isset($arbre['evaluations']))
				unset($arbre['evaluations']);
			foreach ($arbre as $level)
			{
				foreach ($level as $savoir)
				{
					if ($savoir['available'] == true)
					{
						$this->setStrength($savoir,$user);
						if (!isset($savoir['strength']) || $savoir['strength'] != 5)
							$themes_TBP[$key]['savoirs'][] = $savoir;
					}
				}
			}
		}
			return $themes_TBP;
	}
	
}
